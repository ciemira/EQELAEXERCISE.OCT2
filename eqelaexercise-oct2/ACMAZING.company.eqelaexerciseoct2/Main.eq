
/*
 * Main.eq
 * Generated by Eqela Studio 2.0b7.4
 */

public class Main : SEScene
{
	SESprite bg;
	SESprite fg;
	SESprite text;
	bool move_right=true;
	bool move_left=false;
	bool move_down=true;
	bool move_up=false;
	int speed=50;
	double rotation=0;
	String display;
	int bounce;

	public void initialize(SEResourceCache rsc) {
		base.initialize(rsc);
		bg = add_sprite_for_color(Color.instance("#FFAEB9"),get_scene_width(), get_scene_height());
//		fg = add_sprite_for_color(Color.instance("#DC143C"),100,100);
//		fg.move(100,100);

//		rsc.prepare_image("acimage", "nowhere", get_scene_width());
//		bg = add_sprite_for_image(SEImage.for_resource("acimagebg"));
		bg.move(0,0);
		rsc.prepare_font("acfont", "courier new bold color=#DC143C", 50);
		display = "BOUNCES = %d".printf().add(Primitive.for_integer(bounce)).to_string();
		text = add_sprite_for_text(display, "acfont");
		text.move(0, get_scene_height()-text.get_height());
		rsc.prepare_image("acimage", "haha",get_scene_width()*0.1);
		fg = add_sprite_for_image(SEImage.for_resource("acimage"));
		fg.move(100,100);
	}


	public void update(TimeVal now, double delta) {
		base.update(now, delta);
		speed+=50;
		rotation+=MathConstant.M_PI_4;
		fg.set_rotation(rotation);

		if(move_right) {
			fg.move(fg.get_x() + delta*speed, fg.get_y());
			if(fg.get_x() + fg.get_width() > get_scene_width()) {
				speed=50;
				bounce++;
				display="BOUNCES = %d".printf().add(Primitive.for_integer(bounce)).to_string();
				text.set_text(display);
				move_right=false;
				move_left=true;
			}
		}

		if(move_left) {
			fg.move(fg.get_x() - delta*1000, fg.get_y());
			if(fg.get_x()<0){
				speed=50;
				bounce++;
				display="BOUNCES = %d".printf().add(Primitive.for_integer(bounce)).to_string();
				text.set_text(display);
				move_right=true;
				move_left=false;
			}
		}
		
		if(move_down) {
			fg.move(fg.get_x(), fg.get_y() + delta*1000);
			if(fg.get_y() + fg.get_height() > get_scene_height()) {
				speed=50;
				bounce++;
				display="BOUNCES = %d".printf().add(Primitive.for_integer(bounce)).to_string();
				text.set_text(display);
				move_down=false;
				move_up=true;
			}
		}
		
		if(move_up) {
			fg.move(fg.get_x(), fg.get_y()-delta*1000);
			if(fg.get_y() < 0) {
				speed=50;
				bounce++;
				display="BOUNCES = %d".printf().add(Primitive.for_integer(bounce)).to_string();
				text.set_text(display);
				move_down=true;
				move_up=false;
			}
		}
	}

	public void set_rotation(double angle) {
		rotation = angle;
	}

	public double get_rotation() {
		return(rotation);
	}

	public void cleanup() {
		base.cleanup();
		SESprite.remove(fg);
		SESprite.remove(bg);
		SESprite.remove(text);
	}
	
}
